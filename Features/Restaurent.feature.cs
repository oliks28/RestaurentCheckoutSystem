// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace RestaurentCheckoutSystem.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Restaurant Checkout System")]
    public partial class RestaurantCheckoutSystemFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Restaurant Checkout System", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
#line 1 "Restaurent.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public static async System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public static async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
            {
                await testRunner.OnFeatureEndAsync();
            }
            if ((testRunner.FeatureContext == null))
            {
                await testRunner.OnFeatureStartAsync(featureInfo);
            }
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
            global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Group of 4 orders 4 starters, 4 mains, and 4 drinks")]
        [NUnit.Framework.CategoryAttribute("checkout")]
        public async System.Threading.Tasks.Task GroupOf4Orders4Starters4MainsAnd4Drinks()
        {
            string[] tagsOfScenario = new string[] {
                    "checkout"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Group of 4 orders 4 starters, 4 mains, and 4 drinks", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                            "Item",
                            "Quantity",
                            "Time"});
                table1.AddRow(new string[] {
                            "Starter",
                            "4",
                            "20:00"});
                table1.AddRow(new string[] {
                            "Main",
                            "4",
                            "20:00"});
                table1.AddRow(new string[] {
                            "Drink",
                            "4",
                            "20:00"});
#line 6
    await testRunner.GivenAsync("a group of 4 people places an order:", ((string)(null)), table1, "Given ");
#line hidden
#line 11
    await testRunner.WhenAsync("the bill is requested", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 12
    await testRunner.ThenAsync("the total bill should be 58.40", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Group of 2 orders, later joined by 2 more")]
        [NUnit.Framework.CategoryAttribute("checkout")]
        public async System.Threading.Tasks.Task GroupOf2OrdersLaterJoinedBy2More()
        {
            string[] tagsOfScenario = new string[] {
                    "checkout"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Group of 2 orders, later joined by 2 more", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 15
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "Item",
                            "Quantity",
                            "Time"});
                table2.AddRow(new string[] {
                            "Starter",
                            "1",
                            "18:30"});
                table2.AddRow(new string[] {
                            "Main",
                            "2",
                            "18:30"});
                table2.AddRow(new string[] {
                            "Drink",
                            "2",
                            "18:30"});
#line 16
    await testRunner.GivenAsync("a group of 2 orders:", ((string)(null)), table2, "Given ");
#line hidden
#line 21
    await testRunner.WhenAsync("they request the bill", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
    await testRunner.ThenAsync("the total bill should be 23.30", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 23
    await testRunner.GivenAsync("2 more people join at 20:00", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "Item",
                            "Quantity",
                            "Time"});
                table3.AddRow(new string[] {
                            "Main",
                            "2",
                            "20:00"});
                table3.AddRow(new string[] {
                            "Drink",
                            "2",
                            "20:00"});
#line 24
    await testRunner.AndAsync("they order:", ((string)(null)), table3, "And ");
#line hidden
#line 28
    await testRunner.WhenAsync("the final bill is requested", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 29
    await testRunner.ThenAsync("the total bill should be 43.70", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A group of 4 orders, but 1 cancels")]
        [NUnit.Framework.CategoryAttribute("checkout")]
        public async System.Threading.Tasks.Task AGroupOf4OrdersBut1Cancels()
        {
            string[] tagsOfScenario = new string[] {
                    "checkout"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("A group of 4 orders, but 1 cancels", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 32
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "Item",
                            "Quantity",
                            "Time"});
                table4.AddRow(new string[] {
                            "Starter",
                            "4",
                            "20:00"});
                table4.AddRow(new string[] {
                            "Main",
                            "4",
                            "20:00"});
                table4.AddRow(new string[] {
                            "Drink",
                            "4",
                            "20:00"});
#line 33
    await testRunner.GivenAsync("a group of 4 people places an order:", ((string)(null)), table4, "Given ");
#line hidden
#line 38
    await testRunner.WhenAsync("one member cancels their order", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
    await testRunner.ThenAsync("the bill should be updated to 49.50", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
